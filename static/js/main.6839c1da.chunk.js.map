{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","etatInitial","mot","tousLesMots","Math","floor","random","length","handleClick","bind","resetGame","lettresDisponibles","lettresEssayees","Set","etatPartie","barreVie","event","lettreAppuyee","target","firstChild","data","toReturn","this","computeDisplay","add","setState","prevState","includes","barreVieInitial","console","log","nouvelEtat","phrase","usedLetters","replace","letter","has","lettres","map","x","key","className","onClick","boutonRejouer","index","motAffiche","style","text","color","message","batterie","border","height","href","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6839c1da.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst nombreDeVies = 10;\nconst barreVieInitial = 92.5;\n\nclass App extends React.Component {\n\n  get etatInitial() {\n    return {\n      // On crée un array avec toutes les lettres disponibles\n      lettresDisponibles: [...\"abcdefghijklmnopqrstuvwxyz\"],\n      lettresEssayees: new Set(),\n      tousLesMots: ['chat', 'chien', 'cheval', 'poney', 'dromadaire', 'papillon', 'libellule', 'boeuf', 'agneau', 'mouche', 'pigeon', 'crapaud', 'vache'],\n      mot: \"\",\n      etatPartie: 0, //0 = en cours, 1=gagné, 2=perdu\n      barreVie: barreVieInitial,\n    };\n  }\n\n  constructor() {\n    super();\n    this.state = this.etatInitial;\n    this.state.mot = this.state.tousLesMots[Math.floor(Math.random()*this.state.tousLesMots.length)]\n    this.handleClick = this.handleClick.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  handleClick(event) {\n    let lettreAppuyee = event.target.firstChild.data;\n    let toReturn = {}\n\n    // À FAIRE : Rendre plus claire cette horreur de ligne qui vérifie si le joueur a gagné\n    if (this.computeDisplay(this.state.mot, this.state.lettresEssayees.add(lettreAppuyee)) === this.state.mot) {\n      toReturn.etatPartie = 1;\n    }\n\n    this.setState((prevState) => {\n      // On vérifie si la lettre appuyée est valide ou non\n      // pour ensuite enlever de la vie au joueur\n      if (!prevState.mot.includes(lettreAppuyee)) {\n        toReturn.barreVie = prevState.barreVie - (barreVieInitial / nombreDeVies);\n\n        // Si le nombre de vie est égal à 0, changer l'état de la partie\n        if (toReturn.barreVie <= 0) {\n          console.log('Perdu')\n          toReturn.etatPartie = 2;\n        }\n      }\n\n      return {\n        lettresEssayees: prevState.lettresEssayees.add(lettreAppuyee),\n        ...toReturn\n      }\n    })\n  }\n\n  resetGame(event) {\n    this.setState(prevState => {\n      let nouvelEtat = this.etatInitial\n      nouvelEtat.mot = prevState.tousLesMots[Math.floor(Math.random()*prevState.tousLesMots.length)];\n      return nouvelEtat\n    }\n      );\n\n  }\n\n  //On calcule le texte restant à afficher\n  computeDisplay(phrase, usedLetters) {\n    return phrase.replace(/\\w/g,\n      (letter) => (usedLetters.has(letter) ? letter : '_')\n    )\n  }\n\n  render() {\n    // On transforme l'array de lettres du state en divs pour l'affichage\n    let lettres = this.state.lettresDisponibles.map(x => (\n      <div key={x}\n        className={this.state.lettresEssayees.has(x) ? \"lettre lettre-utilisee\" : \"lettre lettre-inutilisee\"}\n        onClick={!this.state.lettresEssayees.has(x) ? this.handleClick : null}>\n        {x}\n      </div>));\n\n    let boutonRejouer = ['R','e','j','o','u','e','r','?'].map((x,index) => (\n      <div key={index}\n        className=\"lettre lettre-rejouer\"\n        onClick={this.resetGame}>\n        {x}\n      </div>));\n\n\n    let motAffiche = this.computeDisplay(this.state.mot, this.state.lettresEssayees)\n\n    let style = {}\n    let text = {}\n\n    switch(this.state.etatPartie) {\n      case 1:\n        style.mot = {color: \"#A9D962\"};\n        text.message = \"Félicitations! Vous avez gagné!\";\n        break;\n      case 2:\n        style.mot = {color: \"rgb(255, 70, 70)\"};\n        style.batterie = {border: \"2px solid rgb(255, 70, 70)\"};\n        text.message = \"Pas de chance... Vous avez perdu.\";\n        text.mot = `Le mot cherché était « ${this.state.mot} ».`;\n        break;\n      default:\n        break;\n    }\n\n\n\n    return (\n      <div className=\"App\">\n        <h1>Le Pendu</h1>\n        <p className=\"header-description\">Trouvez le mot!</p>\n        <div className=\"barreVieContainer\" style={style.batterie}>\n          <div className=\"barreVie\" style={{height: `${this.state.barreVie}%`}}></div>\n        </div>\n        <div className=\"mot\">\n          <p style={style.mot}>{motAffiche}</p>\n        </div>\n        {this.state.etatPartie ? <div><h3>{text.message}</h3><p>{text.mot}</p></div> : \"\"}\n        <div className=\"clavier\">\n          {this.state.etatPartie ? boutonRejouer : lettres}\n        </div>\n\n        <p><br />\n          Le code source de ce projet est disponible sur <a href=\"https://github.com/raphaelmp/react-pendu\" rel=\"noopener noreferrer\" target=\"_blank\">Github</a>.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}